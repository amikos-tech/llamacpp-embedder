name: Python Release

on:
  push:
    tags:
      - 'python/[0-9]+.[0-9]+.[0-9]+'
      - 'python/[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - 'python/[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'
      - 'python/[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+'

  workflow_dispatch:
    inputs:
      create_test_release:
        description: 'Create a Test PyPi release'
        required: false
        type: boolean
        default: true
      create_release:
        description: 'Create a PyPi release'
        required: false
        type: boolean
        default: false
      tag:
        description: 'Tag to build'
        required: true
        default: 'python/0.0.0'
        type: string

jobs:
  py-test:
    name: Lint and Test Python Binding
    uses: ./.github/workflows/python-test.yml

  tag-job:
    needs: [ py-test ]
    runs-on: ubuntu-latest
    name: Get Tag
    outputs:
      tag: ${{ steps.tag-output.outputs.tag }}
      release-tag: ${{ steps.tag-output.outputs.release-tag }}
    steps:
      - name: Get Tag From Ref
        id: tag-ref
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -e
          # Extract the tag name from GITHUB_REF
          FULL_TAG=${GITHUB_REF#refs/tags/}
          echo "Full tag: $FULL_TAG"
          # Remove the 'python/' prefix
          STRIPPED_TAG=${FULL_TAG#python/}
          echo "Stripped tag: $STRIPPED_TAG"
          # Set the output variable
          echo "ref-tag=$STRIPPED_TAG" >> $GITHUB_OUTPUT

      - name: Get Tag From Input
        id: tag-input
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -e
          FULL_TAG=${{ github.event.inputs.tag }}
          echo "Full tag: $FULL_TAG"
          # Remove the 'python/' prefix
          STRIPPED_TAG=${FULL_TAG#python/}
          echo "Stripped tag: $STRIPPED_TAG"

          # Validate the tag format
          if ! [[ $STRIPPED_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+|-beta[0-9]+|-alpha[0-9]+)?$ ]]; then
            echo "Error: Invalid tag format. Expected format: 1.2.3, 1.2.3-rc1, 1.2.3-beta1, or 1.2.3-alpha1 but got: $STRIPPED_TAG"
            exit 1
          fi

          # Set the output variable
          echo "input-tag=$STRIPPED_TAG" >> $GITHUB_OUTPUT


      - name: Output tag
        id: tag-output
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            TAG=${{ steps.tag-ref.outputs.ref-tag }}
            RELEASE_TAG=${GITHUB_REF#refs/tags/}
          else
            TAG=${{ steps.tag-input.outputs.input-tag }}
            RELEASE_TAG=${{ github.event.inputs.tag }}
          fi
          echo "Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        shell: bash

  upload:
    runs-on: ubuntu-latest
    needs: [py-test, tag-job]
    steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        fetch-depth: 0
        submodules: true

    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Update version
      run: |
        sed -i "s/^version = .*/version = \"${{ needs.tag-job.outputs.tag }}\"/" pyproject.toml
        
        # Check if the replacement was successful
        if grep -q "version = \"${{ needs.tag-job.outputs.tag }}\"" pyproject.toml; then
          echo "Successfully updated version to ${{ needs.tag-job.outputs.tag }} in pyproject.toml"
        else
          echo "Failed to update version in pyproject.toml"
          exit 1
        fi

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-distributions*
        merge-multiple: true
        path: dist/

    - name: Create Source Distribution
      run: |
          pip install build
          make python-sdist

    - name: Publish to Test PyPI
      if: github.event.inputs.create_test_release == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Publish to PyPI
      if: github.event.inputs.create_release == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Commit and push updated pyproject.toml
      if: github.event.event_name == 'push' #only commit and push on push events
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Update version in pyproject.toml [skip ci]"
        git push
