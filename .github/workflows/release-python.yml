name: Python Release

on:
  workflow_dispatch:
    inputs:
      create_test_release:
        description: 'Create a Test PyPi release'
        required: false
        type: boolean
        default: true
#  push:
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]*'
jobs:

  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest] #, windows-latest, macos-latest, macos-14, ubuntu-latest,
    steps:
      - name: Dependencies
        if: matrix.os == 'ubuntu-latest'
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libcurl4-openssl-dev
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.os == 'ubuntu-latest'
      - uses: actions/checkout@v4
        id: checkout
        with:
          fetch-depth: 0
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Ninja
        if: matrix.os == 'windows-latest'
        id: install_ninja
        run: |
          choco install ninja
      - name: Set Mac flags
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-14'
        run: |
          echo "CMAKE_FLAGS=-DGGML_METAL_EMBED_LIBRARY=ON" >> $GITHUB_ENV
      - name: Set Windows Env
        if: matrix.os == 'windows-latest'
        run: |
          echo "SHARED_LIB_PATH=../../build/Release" >> $GITHUB_ENV
      - name: Build wheels
        run: |
          make python-cidist
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.8,<3.9"
          CIBW_SKIP: "pp* *musllinux*"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_BEFORE_BUILD: "make lib"
          CIBW_TEST_REQUIRES: "pytest>=6.0.0 huggingface_hub"
          CIBW_TEST_COMMAND: "python -m pytest {project}/bindings/python/tests/test"
          CIBW_TEST_SKIP: "*-macosx_x86_64"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist

  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        fetch-depth: 0
        submodules: true
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
#    - name: Build sdist
#      run: |
#        make dist
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to Test PyPI
      if: github.event.inputs.create_test_release == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
    - name: Publish to PyPI
      if: github.event.inputs.create_test_release != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
