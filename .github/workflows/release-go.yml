name: Release Go Binding

on:
  push:
    tags:
      - 'go-v[0-9]+.[0-9]+.[0-9]+'
      - 'go-v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - 'go-v[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'
      - 'go-v[0-9]+.[0-9]+.[0-9]+-alpha[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build'
        required: true
        default: 'go-v0.0.0'
jobs:

  go-test:
    name: Lint and Test Go Binding
    uses: ./.github/workflows/go-test.yml
    if: github.event_name == 'push'+

  tag-job:
#    needs: [ go-test ]
    runs-on: ubuntu-latest
    name: Get Tag
    outputs:
      tag: ${{ steps.tag-output.outputs.tag }}
    steps:
      - name: Get Tag From Ref
        id: tag-ref
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -e
          # Extract the tag name from GITHUB_REF
          FULL_TAG=${GITHUB_REF#refs/tags/}
          echo "Full tag: $FULL_TAG"
          # Remove the 'go-' prefix
          STRIPPED_TAG=${FULL_TAG#go-}
          echo "Stripped tag: $STRIPPED_TAG"
          # Set the output variable
          echo "ref-tag=$STRIPPED_TAG" >> $GITHUB_OUTPUT

      - name: Get Tag From Input
        id: tag-input
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -e
          FULL_TAG=${{ github.event.inputs.tag }}
          echo "Full tag: $FULL_TAG"
          # Remove the 'go-' prefix
          STRIPPED_TAG=${FULL_TAG#go-}
          echo "Stripped tag: $STRIPPED_TAG"
          
          # Validate the tag format
          if ! [[ $STRIPPED_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+|-beta[0-9]+|-alpha[0-9]+)?$ ]]; then
            echo "Error: Invalid tag format. Expected format: v1.2.3, v1.2.3-rc1, v1.2.3-beta1, or v1.2.3-alpha1 but got: $STRIPPED_TAG"
            exit 1
          fi
          
          # Set the output variable
          echo "input-tag=$STRIPPED_TAG" >> $GITHUB_OUTPUT
      

      - name: Output tag
        id: tag-output
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            TAG=${{ steps.tag-ref.outputs.ref-tag }}
          else
            TAG=${{ steps.tag-input.outputs.input-tag }}
          fi
          echo "Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        shell: bash

  build-linux-binaries:
    name: Build Linux Binaries
    needs: [ go-test , tag-job ]
    uses: ./.github/workflows/build-binaries-linux.yml
    with:
      tag: ${{ needs.tag-job.outputs.tag }}

  build-macos-binaries:
    name: Build MacOS Binaries
    needs: [ go-test , tag-job ]
    uses: ./.github/workflows/build-binaries-macos.yml
    with:
      tag: ${{ needs.tag-job.outputs.tag }}

  build-windows-binaries:
    name: Build Windows Binaries
    needs: [ go-test , tag-job ]
    uses: ./.github/workflows/build-binaries-windows.yml
    with:
      tag: ${{ needs.tag-job.outputs.tag }}

  release:
    name: Create Go Release
    needs: [ build-linux-binaries, build-macos-binaries, build-windows-binaries ]
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Move artifacts
        id: move_artifacts
        run: mkdir -p ./artifact/release && mv ./artifact/*.zip ./artifact/release

      - name: Generate Release Name
        id: release_name
        run: |
          RELEASE_NAME="Go Binding ${{ needs.tag-job.outputs.tag }}"
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.tag }}
          release_name: ${{ steps.release_name.outputs.release_name }}

      - name: Upload artifacts
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact/release')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/release/${file}`)
                });
              }
            }